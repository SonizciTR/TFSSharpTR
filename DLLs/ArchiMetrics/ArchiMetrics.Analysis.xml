<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArchiMetrics.Analysis</name>
    </assembly>
    <members>
        <member name="T:ArchiMetrics.Analysis.Common.IAsyncFactory`2">
            <summary>
            Defines the async factory interface.
            </summary>
            <remarks>The factory will return a new instance of <typeparamref name="T"/> when the Create method is called.</remarks>
            <typeparam name="T">The <see cref="T:System.Type"/> of the object the factory creates.</typeparam>
            <typeparam name="TParameter">The <see cref="T:System.Type"/> of the memberSymbol to pass to the creation method.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which provides the object when the creation has finished.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.IAsyncFactory`2.Create(`0,System.Threading.CancellationToken)">
            <summary>
            Creates the requested instance as an asynchronous operation.
            </summary>
            <param name="memberSymbol">The memberSymbol to pass to the object creation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to use for cancelling the object creation.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> which represents the instance creation task.</returns>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.IAvailability">
            <summary>
            Defines the interface for instances which are temporarlly available.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.IAvailability.IsAvailable">
            <summary>
            Gets or sets whether the instance is available.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.IAvailability.Title">
            <summary>
            Gets the title of the instance.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.IAvailableRules">
            <summary>
            Defines the interface for accessing temporally available items.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.IAvailableRules.Availabilities">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of available items.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.IProvider`2">
            <summary>
            Defines the async provider interface.
            </summary>
            <typeparam name="TKey">The <see cref="T:System.Type"/> of the key.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> of the instance to provide.</typeparam>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.IProvider`2.Get(`0)">
            <summary>
            Gets a consistent reference to the instance with the passed key.
            </summary>
            <param name="key">The key for the item to retrieve.</param>
            <returns>A consistent reference to the item which matches the passed key.</returns>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.IResetable">
            <summary>
            Defines the interface for items which can be reset to their original state.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.IResetable.Reset">
            <summary>
            Resets the instance to the original state.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric">
            <summary>
            Defines the base interface for types providing code metric values.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric.ClassCouplings">
            <summary>
            Gets the type couplings for the members.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric.LinesOfCode">
            <summary>
            Gets the lines of code.
            </summary>
            <remarks>For a description of how lines of code are counted consult this article: http://blogs.msdn.com/b/zainnab/archive/2011/05/12/code-metrics-lines-of-code.aspx .</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric.MaintainabilityIndex">
            <summary>
            Gets the maintainability index.
            </summary>
            <remarks>For a description of how the maintainability is calculated consult this article: http://blogs.msdn.com/b/zainnab/archive/2011/05/26/code-metrics-maintainability-index.aspx .</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric.CyclomaticComplexity">
            <summary>
            Gets the cyclomatic complexity.
            </summary>
            <remarks>For a description of how is calculated consult this article: http://blogs.msdn.com/b/zainnab/archive/2011/05/12/code-metrics-lines-of-code.aspx .</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ICodeMetric.Name">
            <summary>
            Gets the name of the instance the metrics are related to.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.ICodeMetricsCalculator">
            <summary>
            Defines the interface for a code metrics calculator for a project in a solution context.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.ICodeMetricsCalculator.Calculate(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.Solution)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> which will return the metrics for the namespaces in the defined project.
            </summary>
            <param name="project">The <see cref="T:Microsoft.CodeAnalysis.Project"/> to calculate metrics for.</param>
            <param name="solution">The <see cref="T:Microsoft.CodeAnalysis.Solution"/> the project is contained in.</param>
            <remarks>If the <paramref name="solution"/> argument is <code>null</code>, then the project metrics are calculated for a standalone project. This may affect metrics such as afferent and efferent coupling.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> providing an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric"/> instances.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.ICodeMetricsCalculator.Calculate(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree},System.Reflection.Assembly[])">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> which will return the metrics for the defined <see cref="T:Microsoft.CodeAnalysis.SyntaxTree"/>.
            </summary>
            <param name="syntaxTrees">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to calculate metrics for.</param>
            <param name="references">The assemblies referenced by the code snippet.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> providing the calculated metrics as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.NumberOfOperands">
            <summary>
            Gets the number of operands.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.NumberOfOperators">
            <summary>
            Gets the number of operators.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.NumberOfUniqueOperands">
            <summary>
            Gets the number of unique operands.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.NumberOfUniqueOperators">
            <summary>
            Gets the number of unique operators.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetBugs">
            <summary>
            Gets the number of expected bugs in the underlying source code.
            </summary>
            <returns>The expected number of bugs as an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetDifficulty">
            <summary>
            Gets the difficulty of the underlying source code.
            </summary>
            <returns>The calculated difficulty of the underlying source code as a <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetEffort">
            <summary>
            Gets the estimated time to write the underlying source code.
            </summary>
            <returns>The estimated time as a <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetLength">
            <summary>
            Gets the length of the underlying souce code.
            </summary>
            <returns>The length as an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetVocabulary">
            <summary>
            Gets the size of vocabulary of the underlying source code.
            </summary>
            <returns>The vocabulary size as an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.GetVolume">
            <summary>
            Gets the volume of the underlying source code.
            </summary>
            <returns>The volume as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics.Merge(ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics)">
            <summary>
            Creates a new instance of an <see cref="T:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics"/> by merging another instance into the current.
            </summary>
            <param name="metrics">The other instance to merge.</param>
            <returns>The new <see cref="T:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics"/> instance from the merged sources.</returns>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.AccessModifier">
            <summary>
            Gets the access modifier for the member.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.CodeFile">
            <summary>
            Gets the path to the source file containing the member declaration.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.LineNumber">
            <summary>
            Gets the line number in the source file where the member is declared.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.NumberOfParameters">
            <summary>
            Gets the number of parameters for the member.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.NumberOfLocalVariables">
            <summary>
            Gets the number of local variables in the member.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.AfferentCoupling">
            <summary>
            Gets the afferent coupling for the member.
            </summary>
            <remarks>Afferent coupling counts the number of incoming dependencies, i.e. number of locations the member is called.</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.Documentation">
            <summary>
            Gets the <see cref="T:ArchiMetrics.Analysis.Common.Metrics.IMemberDocumentation"/> for the member.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.GetVolume">
            <summary>
            Gets the volume for the underlying source code.
            </summary>
            <returns>The volume as a <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IMemberMetric.GetHalsteadMetrics">
            <summary>
            Gets the Halstead metrics for the member.
            </summary>
            <returns>The Halstead metrics as an <see cref="T:ArchiMetrics.Analysis.Common.Metrics.IHalsteadMetrics"/>.</returns>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric">
            <summary>
            Defines the interface for namespace metrics.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric.DepthOfInheritance">
            <summary>
            Gets the max depth of inheritance for types in the namespace.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric.TypeMetrics">
            <summary>
            Gets the <see cref="T:ArchiMetrics.Analysis.Common.Metrics.ITypeMetric"/> for the types defined in the namespace.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric.Abstractness">
            <summary>
            Gets the level of abstractness for the namespace.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric.Documentation">
            <summary>
            Gets the <see cref="T:ArchiMetrics.Analysis.Common.Metrics.IDocumentation"/> for the namespace.
            </summary>
            <remarks>
            The namespace documentation uses a convention and loads the documentation from a dummy class named [namespace name]Doc.
            
            If this class does not exist then the property will return <code>null</code>.
            </remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.NamespaceMetrics">
            <summary>
            Gets the <see cref="T:ArchiMetrics.Analysis.Common.Metrics.INamespaceMetric"/> for namespaces defined in the project.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.Dependencies">
            <summary>
            Gets the names of the project dependencies.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.RelationalCohesion">
            <summary>
            Gets the relational cohesion for the project.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.EfferentCoupling">
            <summary>
            Gets the efferent coupling for the project.
            </summary>
            <remarks>The efferent coupling counts the number of outgoing dependencies.</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.AfferentCoupling">
            <summary>
            Gets the afferent coupling for the project.
            </summary>
            <remarks>The afferent coupling counts the number of incoming dependencies.</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.Abstractness">
            <summary>
            Gets the level of abstractness for the project.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.IProjectMetric.Dependendants">
            <summary>
            Gets the known dependant projects for this project.
            </summary>
            <remarks>
            Only the projects in the analyzed solution will be considered. Other projects in external solutions may also be dependants as a metadata reference.
            </remarks>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.IProjectMetricsCalculator">
            <summary>
            Defines the interface for a project metrics calculator.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.IProjectMetricsCalculator.Calculate(Microsoft.CodeAnalysis.Solution)">
            <summary>
            Calculates the metrics for the passed <see cref="T:Microsoft.CodeAnalysis.Solution"/>.
            </summary>
            <param name="solution">The <see cref="T:Microsoft.CodeAnalysis.Solution"/> to calculate metrics for.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> providing the metrics as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.ITypeCoupling">
            <summary>
            Defines the interface for representing type coupling information.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeCoupling.UsedMethods">
            <summary>
            Gets the names of the used methods.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeCoupling.UsedProperties">
            <summary>
            Gets the names of the used properties.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeCoupling.UsedEvents">
            <summary>
            Gets the names of the used events.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.ITypeDefinition">
            <summary>
            Defines the interface for representing <see cref="T:System.Type"/> information.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeDefinition.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <remarks>This is the simple name of the type. The fully qualified name can be obtained using the information contained in the <see cref="T:ArchiMetrics.Analysis.Common.Metrics.ITypeDefinition"/>.</remarks>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeDefinition.Namespace">
            <summary>
            Gets the containing namespace for the type.
            </summary>
        </member>
        <member name="P:ArchiMetrics.Analysis.Common.Metrics.ITypeDefinition.Assembly">
            <summary>
            Get the containing assembly name for the type.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.Metrics.TypeCoupling.CompareTo(ArchiMetrics.Analysis.Common.Metrics.ITypeCoupling)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind">
            <summary>
            Defines the kind of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind.Unknown">
            <summary>
            The type kind cannot be determined.
            </summary>
        </member>
        <member name="F:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind.Class">
            <summary>
            The type is a class.
            </summary>
        </member>
        <member name="F:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind.Delegate">
            <summary>
            The type is a delegate.
            </summary>
        </member>
        <member name="F:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind.Interface">
            <summary>
            The type is an interface.
            </summary>
        </member>
        <member name="F:ArchiMetrics.Analysis.Common.Metrics.TypeMetricKind.Struct">
            <summary>
            The type is a struct.
            </summary>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.SolutionProvider">
            <summary>
            Provides a concrete implementation of an <see cref="T:ArchiMetrics.Analysis.Common.IProvider`2"/> for loading <see cref="T:Microsoft.CodeAnalysis.Solution"/>.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.SolutionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ArchiMetrics.Analysis.Common.SolutionProvider"/> class.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.SolutionProvider.Finalize">
            <summary>
            Finalizes the provider.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Common.SolutionProvider.Get(System.String)">
            <summary>
            Gets a consistent reference to the solution at the given path.
            </summary>
            <param name="path">The file path to load the <see cref="T:Microsoft.CodeAnalysis.Solution"/> from.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> which will provide the solution.</returns>
        </member>
        <member name="T:ArchiMetrics.Analysis.Common.Structure.IModelNode">
            <summary>
            Defines the interface for a node in an application model.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.MemberDocumentationFactory.Create(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Creates the requested instance as an asynchronous operation.
            </summary>
            <param name="memberSymbol">The memberSymbol to pass to the object creation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to use for cancelling the object creation.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> which represents the instance creation task.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.MemberDocumentationFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.TypeDocumentationFactory.Create(Microsoft.CodeAnalysis.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Creates the requested instance as an asynchronous operation.
            </summary>
            <param name="memberSymbol">The memberSymbol to pass to the object creation.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to use for cancelling the object creation.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> which represents the instance creation task.</returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.TypeDocumentationFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.HalsteadAnalyzer.Visit(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            Called when the walker visits a node.  This method may be overridden if subclasses want to handle the node.  Overrides should call back into this base method if they want the children of this node to be visited.
            </summary>
            <param name="node">The current node that the walker is visiting.</param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.MemberCollector.VisitArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)">
            <summary>
            Called when the visitor visits a ArrowExpressionClauseSyntax node.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.LinesOfCodeCalculator.InnerLinesOfCodeCalculator.VisitAccessorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)">
            <summary>
            Called when the visitor visits a AccessorDeclarationSyntax node.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.LinesOfCodeCalculator.InnerLinesOfCodeCalculator.VisitConstructorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)">
            <summary>
            Called when the visitor visits a ConstructorDeclarationSyntax node.
            </summary>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.ComparableComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            True if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="x"/> to compare.</param><param name="y">The second object of type <paramref name="y"/> to compare.</param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Metrics.ComparableComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelEdgeItem.Equals(ArchiMetrics.Analysis.Model.ModelEdgeItem)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <code>true</code> if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelEdgeItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelEdgeItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelEdgeItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <code>true</code> if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelNode.Equals(ArchiMetrics.Analysis.Common.Structure.IModelNode)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <code>true</code> if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <code>true</code> if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:ArchiMetrics.Analysis.Model.ModelNode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:ArchiMetrics.Analysis.ReferenceResolvers.ReferenceRepository.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
